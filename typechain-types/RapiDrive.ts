/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IRapiDrive {
  export type DriverStruct = {
    driver: string;
    trips: BigNumberish;
    inSystem: boolean;
    timeIn: BigNumberish;
    awarded: boolean;
  };

  export type DriverStructOutput = [
    string,
    number,
    boolean,
    BigNumber,
    boolean
  ] & {
    driver: string;
    trips: number;
    inSystem: boolean;
    timeIn: BigNumber;
    awarded: boolean;
  };
}

export interface RapiDriveInterface extends utils.Interface {
  contractName: "RapiDrive";
  functions: {
    "NFT()": FunctionFragment;
    "RPDtoken()": FunctionFragment;
    "getDriver(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetTrip()": FunctionFragment;
    "setRPDAddress(address)": FunctionFragment;
    "tollEntry(string)": FunctionFragment;
    "tollExit(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "RPDtoken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDriver", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resetTrip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRPDAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tollEntry", values: [string]): string;
  encodeFunctionData(functionFragment: "tollExit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "NFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RPDtoken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDriver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetTrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRPDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tollEntry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tollExit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "offRampExitedTollPaid(bytes32,uint256,string,uint256)": EventFragment;
    "onRampEntered(bytes32,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "offRampExitedTollPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onRampEntered"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type offRampExitedTollPaidEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    hashedDriver: string;
    timeExited: BigNumber;
    tollIdentifier: string;
    tollCost: BigNumber;
  }
>;

export type offRampExitedTollPaidEventFilter =
  TypedEventFilter<offRampExitedTollPaidEvent>;

export type onRampEnteredEvent = TypedEvent<
  [string, BigNumber, string],
  { hashedDriver: string; timeEntered: BigNumber; tollIdentifier: string }
>;

export type onRampEnteredEventFilter = TypedEventFilter<onRampEnteredEvent>;

export interface RapiDrive extends BaseContract {
  contractName: "RapiDrive";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RapiDriveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NFT(overrides?: CallOverrides): Promise<[BigNumber]>;

    RPDtoken(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDriver(
      drive: string,
      overrides?: CallOverrides
    ): Promise<[IRapiDrive.DriverStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetTrip(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRPDAddress(
      rpdAddy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tollEntry(
      tollIdentifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tollExit(
      tollIdentifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NFT(overrides?: CallOverrides): Promise<BigNumber>;

  RPDtoken(overrides?: CallOverrides): Promise<BigNumber>;

  getDriver(
    drive: string,
    overrides?: CallOverrides
  ): Promise<IRapiDrive.DriverStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetTrip(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRPDAddress(
    rpdAddy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tollEntry(
    tollIdentifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tollExit(
    tollIdentifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NFT(overrides?: CallOverrides): Promise<BigNumber>;

    RPDtoken(overrides?: CallOverrides): Promise<BigNumber>;

    getDriver(
      drive: string,
      overrides?: CallOverrides
    ): Promise<IRapiDrive.DriverStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetTrip(overrides?: CallOverrides): Promise<void>;

    setRPDAddress(rpdAddy: string, overrides?: CallOverrides): Promise<void>;

    tollEntry(tollIdentifier: string, overrides?: CallOverrides): Promise<void>;

    tollExit(tollIdentifier: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "offRampExitedTollPaid(bytes32,uint256,string,uint256)"(
      hashedDriver?: null,
      timeExited?: null,
      tollIdentifier?: null,
      tollCost?: null
    ): offRampExitedTollPaidEventFilter;
    offRampExitedTollPaid(
      hashedDriver?: null,
      timeExited?: null,
      tollIdentifier?: null,
      tollCost?: null
    ): offRampExitedTollPaidEventFilter;

    "onRampEntered(bytes32,uint256,string)"(
      hashedDriver?: null,
      timeEntered?: null,
      tollIdentifier?: null
    ): onRampEnteredEventFilter;
    onRampEntered(
      hashedDriver?: null,
      timeEntered?: null,
      tollIdentifier?: null
    ): onRampEnteredEventFilter;
  };

  estimateGas: {
    NFT(overrides?: CallOverrides): Promise<BigNumber>;

    RPDtoken(overrides?: CallOverrides): Promise<BigNumber>;

    getDriver(drive: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetTrip(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRPDAddress(
      rpdAddy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tollEntry(
      tollIdentifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tollExit(
      tollIdentifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RPDtoken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDriver(
      drive: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetTrip(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRPDAddress(
      rpdAddy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tollEntry(
      tollIdentifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tollExit(
      tollIdentifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
